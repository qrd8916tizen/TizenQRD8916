diff --git a/arch/arm/configs/msm8916_defconfig b/arch/arm/configs/msm8916_defconfig
index e37223c..03e29b1 100644
--- a/arch/arm/configs/msm8916_defconfig
+++ b/arch/arm/configs/msm8916_defconfig
@@ -18,7 +18,7 @@ CONFIG_NAMESPACES=y
 # CONFIG_IPC_NS is not set
 # CONFIG_PID_NS is not set
 CONFIG_RELAY=y
-CONFIG_BLK_DEV_INITRD=y
+# CONFIG_BLK_DEV_INITRD is not set
 CONFIG_RD_BZIP2=y
 CONFIG_RD_LZMA=y
 CONFIG_CC_OPTIMIZE_FOR_SIZE=y
@@ -212,7 +212,7 @@ CONFIG_IPC_ROUTER_SECURITY=y
 CONFIG_CMA=y
 CONFIG_CMA_SIZE_MBYTES=8
 CONFIG_BLK_DEV_LOOP=y
-CONFIG_BLK_DEV_RAM=y
+# CONFIG_BLK_DEV_RAM is not set
 CONFIG_APDS9930=y
 CONFIG_QSEECOM=y
 CONFIG_SCSI=y
@@ -465,6 +465,9 @@ CONFIG_MSM_PIL_SSR_GENERIC=y
 CONFIG_MSM_PIL_MSS_QDSP6V5=y
 CONFIG_MSM_SCM=y
 CONFIG_MEM_SHARE_QMI_SERVICE=y
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_AUTOFS4_FS=y
 CONFIG_EXT2_FS=y
 CONFIG_EXT2_FS_XATTR=y
 CONFIG_EXT3_FS=y
@@ -475,6 +478,7 @@ CONFIG_EXT4_FS_SECURITY=y
 CONFIG_FUSE_FS=y
 CONFIG_VFAT_FS=y
 CONFIG_TMPFS=y
+CONFIG_TMPFS_XATTR=y
 CONFIG_NLS_CODEPAGE_437=y
 CONFIG_NLS_ASCII=y
 CONFIG_NLS_ISO8859_1=y
@@ -509,8 +513,10 @@ CONFIG_DEBUG_SET_MODULE_RONX=y
 CONFIG_KEYS=y
 CONFIG_SECURITY=y
 CONFIG_SECURITY_NETWORK=y
+CONFIG_NETLABEL=y
 CONFIG_LSM_MMAP_MIN_ADDR=4096
 CONFIG_SECURITY_SELINUX=y
+CONFIG_SECURITY_SMACK=y
 CONFIG_CRYPTO_MD4=y
 CONFIG_CRYPTO_ARC4=y
 CONFIG_CRYPTO_TWOFISH=y
diff --git a/drivers/input/touchscreen/ft5x06_ts.c b/drivers/input/touchscreen/ft5x06_ts.c
index b188f20..c821068 100644
--- a/drivers/input/touchscreen/ft5x06_ts.c
+++ b/drivers/input/touchscreen/ft5x06_ts.c
@@ -31,6 +31,9 @@
 #include <linux/debugfs.h>
 #include <linux/input/ft5x06_ts.h>
 
+#define FT5X06_VIRTUAL_KEY
+
+static struct input_dev *input_key_dev=NULL;
 #if defined(CONFIG_FB)
 #include <linux/notifier.h>
 #include <linux/fb.h>
@@ -347,6 +350,11 @@ static irqreturn_t ft5x06_ts_interrupt(int irq, void *dev_id)
 	u8 reg = 0x00, *buf;
 	bool update_input = false;
 
+	bool update_key_input = false;
+	static int menudown = 0;
+	static int homedown = 0;
+	static int backdown = 0;
+
 	if (!data) {
 		pr_err("%s: Invalid data\n", __func__);
 		return IRQ_HANDLED;
@@ -382,6 +390,46 @@ static irqreturn_t ft5x06_ts_interrupt(int irq, void *dev_id)
 		if (!num_touches && !status && !id)
 			break;
 
+#ifdef FT5X06_VIRTUAL_KEY
+		if (status == FT_TOUCH_DOWN || status == FT_TOUCH_CONTACT) {
+			if ((x == 0x78) && (y == 0x384) && (menudown == 0)) {
+				menudown = 1;
+				input_report_key(input_key_dev, KEY_PHONE, 1);
+				update_key_input=true;
+			}
+			if ((x == 0xf0) && (y == 0x384) && (homedown == 0)) {
+				homedown = 1;
+				input_report_key(input_key_dev, KEY_MENU, 1);
+				update_key_input=true;
+			}
+			if ((x == 0x168) && (y == 0x384) && (backdown == 0 )) {
+				backdown = 1;
+				input_report_key(input_key_dev, KEY_BACK, 1);
+				update_key_input=true;
+			}
+		} else {
+			if ((x == 0x78) && (y == 0x384) && (menudown == 1)) {
+				menudown = 0;
+				input_report_key(input_key_dev, KEY_PHONE, 0);
+				update_key_input=true;
+			}
+                        if ((x == 0xf0) && (y == 0x384) && (homedown == 1)) {
+				homedown = 0;
+				input_report_key(input_key_dev, KEY_MENU, 0);
+				update_key_input=true;
+			}
+                        if ((x == 0x168) && (y == 0x384) && (backdown == 1 )) {
+				backdown = 0;
+				input_report_key(input_key_dev, KEY_BACK, 0);
+				update_key_input=true;
+			}
+		}
+
+		if(update_key_input)
+		{
+			input_sync(input_key_dev);
+		}
+#endif
 		input_mt_slot(ip_dev, id);
 		if (status == FT_TOUCH_DOWN || status == FT_TOUCH_CONTACT) {
 			input_mt_report_slot_state(ip_dev, MT_TOOL_FINGER, 1);
@@ -1571,6 +1619,9 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 	__set_bit(BTN_TOUCH, input_dev->keybit);
 	__set_bit(INPUT_PROP_DIRECT, input_dev->propbit);
 
+	__set_bit(ABS_X, input_dev->absbit);
+	__set_bit(ABS_Y, input_dev->absbit);
+
 	input_mt_init_slots(input_dev, pdata->num_max_touches, 0);
 	input_set_abs_params(input_dev, ABS_MT_POSITION_X, pdata->x_min,
 			     pdata->x_max, 0, 0);
@@ -1583,6 +1634,29 @@ static int ft5x06_ts_probe(struct i2c_client *client,
 		goto free_inputdev;
 	}
 
+#ifdef FT5X06_VIRTUAL_KEY
+        input_key_dev = input_allocate_device();
+        if (!input_key_dev) {
+                dev_err(&client->dev, "failed to allocate input key device\n");
+                return -ENOMEM;
+        }
+
+        input_key_dev->name = "ft5x06_ts_kbd";
+        input_key_dev->id.bustype = BUS_I2C;
+        input_key_dev->dev.parent = &client->dev;
+
+        __set_bit(EV_KEY, input_key_dev->evbit);
+        __set_bit(BTN_TOUCH, input_key_dev->keybit);
+        __set_bit(KEY_MENU, input_key_dev->keybit);
+        __set_bit(KEY_PHONE, input_key_dev->keybit);
+        __set_bit(KEY_BACK, input_key_dev->keybit);
+        err = input_register_device(input_key_dev);
+        if (err) {
+                dev_err(&client->dev, "Input key device registration failed\n");
+                goto free_inputdev;
+        }
+
+#endif
 	if (pdata->power_init) {
 		err = pdata->power_init(true);
 		if (err) {
diff --git a/drivers/mmc/card/block.c b/drivers/mmc/card/block.c
index 6afcfca..e16ca98 100644
--- a/drivers/mmc/card/block.c
+++ b/drivers/mmc/card/block.c
@@ -3046,7 +3046,7 @@ static int mmc_blk_alloc_parts(struct mmc_card *card, struct mmc_blk_data *md)
 		return 0;
 
 	for (idx = 0; idx < card->nr_parts; idx++) {
-		if (card->part[idx].size) {
+		if (card->part[idx].size && !(card->part[idx].area_type & MMC_BLK_DATA_AREA_RPMB)) {
 			ret = mmc_blk_alloc_part(card, md,
 				card->part[idx].part_cfg,
 				card->part[idx].size >> 9,
diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index 5f3f5af..f9f3306 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -425,7 +425,33 @@ struct functionfs_config {
 	struct ffs_data *data;
 	struct android_dev *dev;
 };
+#if 1//sdb
+#include "f_sdb.c"
+static int sdb_function_init(struct android_usb_function *f,
+                             struct usb_composite_dev *cdev)
+{
+        return sdb_setup(cdev);
+}
+
+static void sdb_function_cleanup(struct android_usb_function *f)
+{
+        sdb_cleanup();
+}
 
+static int sdb_function_bind_config(struct android_usb_function *f,
+                                    struct usb_configuration *c)
+{
+        return sdb_bind_config(c);
+}
+
+static struct android_usb_function sdb_function = {
+        .name = "sdb",
+        .init = sdb_function_init,
+        .cleanup = sdb_function_cleanup,
+        .bind_config = sdb_function_bind_config,
+};
+
+#endif
 static int ffs_function_init(struct android_usb_function *f,
 			     struct usb_composite_dev *cdev)
 {
@@ -2571,6 +2597,7 @@ static struct android_usb_function uasp_function = {
 };
 
 static struct android_usb_function *supported_functions[] = {
+	&sdb_function,
 	&ffs_function,
 	&mbim_function,
 	&ecm_qc_function,
diff --git a/drivers/usb/gadget/config_slp.c b/drivers/usb/gadget/config_slp.c
new file mode 100644
index 0000000..4bed0d9
--- /dev/null
+++ b/drivers/usb/gadget/config_slp.c
@@ -0,0 +1,52 @@
+/*
+ * usb/gadget/config.c -- simplify building config descriptors
+ *
+ * Copyright (C) 2003 David Brownell
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#ifndef TIZEN_USB_CONFIG_C
+#define TIZEN_USB_CONFIG_C
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/list.h>
+#include <linux/string.h>
+#include <linux/device.h>
+
+#include <linux/usb/ch9.h>
+#include <linux/usb/gadget.h>
+#include <linux/usb/composite.h>
+
+/**
+ * usb_find_endpoint - find a copy of an endpoint descriptor
+ * @src: original vector of descriptors
+ * @copy: copy of @src
+ * @match: endpoint descriptor found in @src
+ *
+ * This returns the copy of the @match descriptor made for @copy.  Its
+ * intended use is to help remembering the endpoint descriptor to use
+ * when enabling a given endpoint.
+ */
+struct usb_endpoint_descriptor *
+usb_find_endpoint(
+	struct usb_descriptor_header **src,
+	struct usb_descriptor_header **copy,
+	struct usb_endpoint_descriptor *match
+)
+{
+	while (*src) {
+		if (*src == (void *) match)
+			return (void *)*copy;
+		src++;
+		copy++;
+	}
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(usb_find_endpoint);
+
+#endif //TIZEN_USB_CONFIG_C
diff --git a/drivers/usb/gadget/f_sdb.c b/drivers/usb/gadget/f_sdb.c
new file mode 100644
index 0000000..0c0d873
--- /dev/null
+++ b/drivers/usb/gadget/f_sdb.c
@@ -0,0 +1,768 @@
+/*
+ * Gadget Driver for Samsung SDB (based on Android ADB)
+ *
+ * Copyright (C) 2008 Google, Inc.
+ * Author: Mike Lockwood <lockwood@android.com>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+/* #define DEBUG */
+/* #define VERBOSE_DEBUG */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/poll.h>
+#include <linux/delay.h>
+#include <linux/sched.h>
+#include <linux/wait.h>
+#include <linux/err.h>
+#include <linux/interrupt.h>
+
+#include <linux/types.h>
+#include <linux/device.h>
+#include <linux/miscdevice.h>
+
+#define SDB_BULK_BUFFER_SIZE           4096
+#include "config_slp.c"
+/* number of tx requests to allocate */
+#define SDB_TX_REQ_MAX 4
+
+static const char sdb_shortname[] = "samsung_sdb";
+static DEFINE_MUTEX(sdb_lock);
+
+struct sdb_ep_descs {
+	struct usb_endpoint_descriptor	*in;
+	struct usb_endpoint_descriptor	*out;
+};
+
+struct f_sdb {
+	struct usb_function function;
+	u8	inf_id;
+
+	struct sdb_ep_descs	fs;
+	struct sdb_ep_descs hs;
+
+	struct usb_ep *ep_in;
+	struct usb_ep *ep_out;
+
+	struct list_head bulk_in_q;
+};
+
+struct sdb_dev {
+	struct f_sdb *sdb_func;
+	spinlock_t lock;
+
+	int online;
+	int error;
+
+	atomic_t read_excl;
+	atomic_t write_excl;
+	atomic_t open_excl;
+
+	struct list_head *tx_idle;
+
+	wait_queue_head_t read_wq;
+	wait_queue_head_t write_wq;
+
+	struct usb_request *rx_req;
+	int rx_done;
+};
+
+static struct usb_interface_descriptor sdb_interface_desc = {
+	.bLength                = USB_DT_INTERFACE_SIZE,
+	.bDescriptorType        = USB_DT_INTERFACE,
+	/* .bInterfaceNumber	= DYNAMIC */
+	.bNumEndpoints          = 2,
+	.bInterfaceClass        = 0xFF,
+	.bInterfaceSubClass     = 0x20,
+	.bInterfaceProtocol     = 0x02,
+	/* .iInterface			= DYNAMIC */
+};
+
+static struct usb_endpoint_descriptor sdb_fullspeed_in_desc = {
+	.bLength                = USB_DT_ENDPOINT_SIZE,
+	.bDescriptorType        = USB_DT_ENDPOINT,
+	.bEndpointAddress       = USB_DIR_IN,
+	.bmAttributes           = USB_ENDPOINT_XFER_BULK,
+	/* .wMaxPacketSize set by autoconfiguration */
+};
+
+static struct usb_endpoint_descriptor sdb_fullspeed_out_desc = {
+	.bLength                = USB_DT_ENDPOINT_SIZE,
+	.bDescriptorType        = USB_DT_ENDPOINT,
+	.bEndpointAddress       = USB_DIR_OUT,
+	.bmAttributes           = USB_ENDPOINT_XFER_BULK,
+	/* .wMaxPacketSize set by autoconfiguration */
+};
+
+static struct usb_descriptor_header *fs_sdb_descs[] = {
+	(struct usb_descriptor_header *) &sdb_interface_desc,
+	(struct usb_descriptor_header *) &sdb_fullspeed_in_desc,
+	(struct usb_descriptor_header *) &sdb_fullspeed_out_desc,
+	NULL,
+};
+
+static struct usb_endpoint_descriptor sdb_highspeed_in_desc = {
+	.bLength                = USB_DT_ENDPOINT_SIZE,
+	.bDescriptorType        = USB_DT_ENDPOINT,
+	/* bEndpointAddress copied from sdb_fullspeed_in_desc
+		during sdb_function_bind() */
+	.bmAttributes           = USB_ENDPOINT_XFER_BULK,
+	.wMaxPacketSize         = __constant_cpu_to_le16(512),
+};
+
+static struct usb_endpoint_descriptor sdb_highspeed_out_desc = {
+	.bLength                = USB_DT_ENDPOINT_SIZE,
+	.bDescriptorType        = USB_DT_ENDPOINT,
+	/* bEndpointAddress copied from sdb_fullspeed_in_desc
+		during sdb_function_bind() */
+	.bmAttributes           = USB_ENDPOINT_XFER_BULK,
+	.wMaxPacketSize         = __constant_cpu_to_le16(512),
+};
+
+static struct usb_descriptor_header *hs_sdb_descs[] = {
+	(struct usb_descriptor_header *) &sdb_interface_desc,
+	(struct usb_descriptor_header *) &sdb_highspeed_in_desc,
+	(struct usb_descriptor_header *) &sdb_highspeed_out_desc,
+	NULL,
+};
+
+/* string descriptors: */
+
+#define F_SDB_IDX	0
+
+/* static strings, in UTF-8 */
+static struct usb_string sdb_string_defs[] = {
+	[F_SDB_IDX].s = "Samsung SDB",
+	{  /* ZEROES END LIST */ },
+};
+
+static struct usb_gadget_strings sdb_string_table = {
+	.language =		0x0409,	/* en-us */
+	.strings =		sdb_string_defs,
+};
+
+static struct usb_gadget_strings *sdb_strings[] = {
+	&sdb_string_table,
+	NULL,
+};
+
+/* temporary variable used between sdb_open() and sdb_gadget_bind() */
+static struct sdb_dev *_sdb_dev;
+
+
+static inline struct f_sdb *func_to_sdb(struct usb_function *f)
+{
+	return container_of(f, struct f_sdb, function);
+}
+
+
+static struct usb_request *sdb_request_new(struct usb_ep *ep, int buffer_size)
+{
+	struct usb_request *req = usb_ep_alloc_request(ep, GFP_KERNEL);
+	if (!req)
+		return NULL;
+
+	/* now allocate buffers for the requests */
+	req->buf = kmalloc(buffer_size, GFP_KERNEL);
+	if (!req->buf) {
+		usb_ep_free_request(ep, req);
+		return NULL;
+	}
+
+	return req;
+}
+
+static void sdb_request_free(struct usb_request *req, struct usb_ep *ep)
+{
+	if (req) {
+		kfree(req->buf);
+		usb_ep_free_request(ep, req);
+	}
+}
+
+static inline int _sdb_lock(atomic_t *excl)
+{
+	if (atomic_inc_return(excl) == 1) {
+		return 0;
+	} else {
+		atomic_dec(excl);
+		return -1;
+	}
+}
+
+static inline void _sdb_unlock(atomic_t *excl)
+{
+	atomic_dec(excl);
+}
+
+/* add a request to the tail of a list */
+static void sdb_req_put(struct sdb_dev *dev, struct list_head *head,
+		struct usb_request *req)
+{
+	unsigned long flags;
+
+	if (!dev || !req)
+		return;
+
+	spin_lock_irqsave(&dev->lock, flags);
+	if (head)
+		list_add_tail(&req->list, head);
+	spin_unlock_irqrestore(&dev->lock, flags);
+}
+
+/* remove a request from the head of a list */
+static struct usb_request *sdb_req_get(struct sdb_dev *dev,
+				struct list_head *head)
+{
+	unsigned long flags;
+	struct usb_request *req;
+
+	if (!dev)
+		return NULL;
+
+	spin_lock_irqsave(&dev->lock, flags);
+	if (!head)
+		req = NULL;
+	else {
+		if (list_empty(head)) {
+			req = NULL;
+		} else {
+			req = list_first_entry(head, struct usb_request, list);
+			list_del(&req->list);
+		}
+	}
+	spin_unlock_irqrestore(&dev->lock, flags);
+	return req;
+}
+
+static void sdb_complete_in(struct usb_ep *ep, struct usb_request *req)
+{
+	struct sdb_dev *dev = _sdb_dev;
+	struct f_sdb *sdb_func = ep->driver_data;
+
+	if (req->status != 0)
+		dev->error = 1;
+
+	sdb_req_put(dev, &sdb_func->bulk_in_q, req);
+	wake_up(&dev->write_wq);
+}
+
+static void sdb_complete_out(struct usb_ep *ep, struct usb_request *req)
+{
+	struct sdb_dev *dev = _sdb_dev;
+
+	dev->rx_done = 1;
+	if (req->status != 0)
+		dev->error = 1;
+
+	wake_up(&dev->read_wq);
+}
+
+static int sdb_create_bulk_endpoints(struct f_sdb *sdb_func,
+				struct usb_endpoint_descriptor *in_desc,
+				struct usb_endpoint_descriptor *out_desc)
+{
+	struct usb_composite_dev *cdev = sdb_func->function.config->cdev;
+	struct usb_request *req;
+	struct sdb_dev *dev = _sdb_dev;
+	struct usb_ep *ep;
+	int i;
+
+	DBG(cdev, "sdb_create_bulk_endpoints dev: %p\n", dev);
+	ep = usb_ep_autoconfig(cdev->gadget, in_desc);
+	if (!ep) {
+		ERROR(cdev, "usb_ep_autoconfig for ep_in failed\n");
+		return -ENODEV;
+	}
+	DBG(cdev, "usb_ep_autoconfig for ep_in got %s\n", ep->name);
+	ep->driver_data = cdev;		/* claim the endpoint */
+	sdb_func->ep_in = ep;
+
+	ep = usb_ep_autoconfig(cdev->gadget, out_desc);
+	if (!ep) {
+		ERROR(cdev, "usb_ep_autoconfig for ep_out failed\n");
+		return -ENODEV;
+	}
+	DBG(cdev, "usb_ep_autoconfig for sdb ep_out got %s\n", ep->name);
+	ep->driver_data = cdev;		/* claim the endpoint */
+	sdb_func->ep_out = ep;
+
+	/* now allocate requests for our endpoints */
+	req = sdb_request_new(sdb_func->ep_out, SDB_BULK_BUFFER_SIZE);
+	if (!req)
+		return -ENOMEM;
+	req->complete = sdb_complete_out;
+	dev->rx_req = req;
+
+	for (i = 0; i < SDB_TX_REQ_MAX; i++) {
+		req = sdb_request_new(sdb_func->ep_in, SDB_BULK_BUFFER_SIZE);
+		if (!req)
+			goto fail;
+		req->complete = sdb_complete_in;
+		sdb_req_put(dev, &sdb_func->bulk_in_q, req);
+	}
+
+	return 0;
+
+fail:
+	while (!!(req = sdb_req_get(dev, &sdb_func->bulk_in_q)))
+		sdb_request_free(req, sdb_func->ep_in);
+
+	sdb_request_free(dev->rx_req, sdb_func->ep_out);
+	dev->rx_req = NULL;
+
+	if (sdb_func->ep_in)
+		sdb_func->ep_in->driver_data = NULL;
+	if (sdb_func->ep_out)
+		sdb_func->ep_out->driver_data = NULL;
+
+	printk(KERN_ERR "sdb_bind() could not allocate requests\n");
+	return -ENOMEM;
+}
+
+static ssize_t sdb_read(struct file *fp, char __user *buf,
+				size_t count, loff_t *pos)
+{
+	struct sdb_dev *dev = fp->private_data;
+	int r = count, xfer;
+	int ret;
+
+	if (count > SDB_BULK_BUFFER_SIZE)
+		return -EINVAL;
+
+	if (_sdb_lock(&dev->read_excl))
+		return -EBUSY;
+
+	/* we will block until we're online */
+	while (!(dev->online || dev->error)) {
+		ret = wait_event_interruptible(dev->read_wq,
+				(dev->online || dev->error));
+		if (ret < 0) {
+			_sdb_unlock(&dev->read_excl);
+			return ret;
+		}
+	}
+	if (dev->error) {
+		r = -EIO;
+		goto done;
+	}
+
+requeue_req:
+	/* queue a request */
+	mutex_lock(&sdb_lock);
+	if (!dev->sdb_func || !dev->rx_req)
+		ret = -ENODEV;
+	else {
+		dev->rx_req->length = count;
+		dev->rx_done = 0;
+		ret = usb_ep_queue(dev->sdb_func->ep_out,
+				dev->rx_req, GFP_ATOMIC);
+	}
+	mutex_unlock(&sdb_lock);
+
+	if (ret < 0) {
+		r = -EIO;
+		dev->error = 1;
+		goto done;
+	}
+
+	/* wait for a request to complete */
+	ret = wait_event_interruptible(dev->read_wq, dev->rx_done);
+	if (ret < 0) {
+		dev->error = 1;
+		r = ret;
+		goto done;
+	}
+	if (!dev->error) {
+		/* If we got a 0-len packet, throw it back and try again. */
+		if (dev->rx_req->actual == 0)
+			goto requeue_req;
+
+		mutex_lock(&sdb_lock);
+		if (!dev->sdb_func || !dev->rx_req)
+			r = -ENODEV;
+		else {
+			xfer = (dev->rx_req->actual < count)
+					? dev->rx_req->actual : count;
+			if (copy_to_user(buf, dev->rx_req->buf, xfer))
+				r = -EFAULT;
+		}
+		mutex_unlock(&sdb_lock);
+	} else
+		r = -EIO;
+
+done:
+	_sdb_unlock(&dev->read_excl);
+	return r;
+}
+
+static ssize_t sdb_write(struct file *fp, const char __user *buf,
+				 size_t count, loff_t *pos)
+{
+	struct sdb_dev *dev = fp->private_data;
+	struct usb_request *req = 0;
+	int r = count, xfer;
+	int ret;
+
+	if (_sdb_lock(&dev->write_excl))
+		return -EBUSY;
+
+	while (count > 0) {
+		if (dev->error) {
+			r = -EIO;
+			break;
+		}
+
+		/* get an idle tx request to use */
+		req = 0;
+		ret = wait_event_interruptible(dev->write_wq,
+				(!!(req = sdb_req_get(dev, dev->tx_idle))
+				 || dev->error));
+
+		if (ret < 0) {
+			r = ret;
+			break;
+		}
+
+		if (req != 0) {
+			if (count > SDB_BULK_BUFFER_SIZE)
+				xfer = SDB_BULK_BUFFER_SIZE;
+			else
+				xfer = count;
+
+			mutex_lock(&sdb_lock);
+			if (!dev->sdb_func) {
+				mutex_unlock(&sdb_lock);
+				r = -ENODEV;
+				break;
+			} else if (copy_from_user(req->buf, buf, xfer)) {
+				mutex_unlock(&sdb_lock);
+				r = -EFAULT;
+				break;
+			}
+
+			req->length = xfer;
+			ret = usb_ep_queue(dev->sdb_func->ep_in,
+					req, GFP_ATOMIC);
+			mutex_unlock(&sdb_lock);
+
+			if (ret < 0) {
+				dev->error = 1;
+				r = -EIO;
+				break;
+			}
+
+			buf += xfer;
+			count -= xfer;
+
+			/* zero this so we don't try to free it on error exit */
+			req = 0;
+		}
+	}
+
+	if (req)
+		sdb_req_put(dev, dev->tx_idle, req);
+
+	_sdb_unlock(&dev->write_excl);
+	return r;
+}
+
+static int sdb_open(struct inode *ip, struct file *fp)
+{
+	printk(KERN_INFO "sdb_open\n");
+
+	if (_sdb_lock(&_sdb_dev->open_excl))
+		return -EBUSY;
+
+	fp->private_data = _sdb_dev;
+
+	/* clear the error latch */
+	_sdb_dev->error = 0;
+
+	return 0;
+}
+
+static int sdb_release(struct inode *ip, struct file *fp)
+{
+	printk(KERN_INFO "sdb_release\n");
+
+	if (_sdb_dev != NULL)
+		_sdb_unlock(&_sdb_dev->open_excl);
+
+	return 0;
+}
+
+/* file operations for SDB device /dev/samsung_sdb */
+static const struct file_operations sdb_fops = {
+	.owner = THIS_MODULE,
+	.read = sdb_read,
+	.write = sdb_write,
+	.open = sdb_open,
+	.release = sdb_release,
+};
+
+static struct miscdevice sdb_device = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = sdb_shortname,
+	.fops = &sdb_fops,
+};
+
+static int
+sdb_function_bind(struct usb_configuration *c, struct usb_function *f)
+{
+	struct usb_composite_dev *cdev = c->cdev;
+	struct f_sdb *sdb_func = func_to_sdb(f);
+	int			id;
+	int			ret;
+
+	DBG(cdev, "sdb_function_bind sdb_func: %p\n", sdb_func);
+
+	/* allocate interface ID(s) */
+	id = usb_interface_id(c, f);
+	if (id < 0)
+		return id;
+
+	sdb_func->inf_id = id;
+	sdb_interface_desc.bInterfaceNumber = id;
+
+	/* allocate endpoints */
+	ret = sdb_create_bulk_endpoints(sdb_func, &sdb_fullspeed_in_desc,
+			&sdb_fullspeed_out_desc);
+	if (ret)
+		return ret;
+
+	f->fs_descriptors = usb_copy_descriptors(fs_sdb_descs);
+	if (!f->fs_descriptors)
+		goto desc_alloc_fail;
+
+	sdb_func->fs.in = usb_find_endpoint(fs_sdb_descs, f->fs_descriptors,
+					&sdb_fullspeed_in_desc);
+	sdb_func->fs.out = usb_find_endpoint(fs_sdb_descs, f->fs_descriptors,
+					&sdb_fullspeed_out_desc);
+
+	/* support high speed hardware */
+	if (gadget_is_dualspeed(cdev->gadget)) {
+		sdb_highspeed_in_desc.bEndpointAddress =
+			sdb_fullspeed_in_desc.bEndpointAddress;
+		sdb_highspeed_out_desc.bEndpointAddress =
+			sdb_fullspeed_out_desc.bEndpointAddress;
+
+		f->hs_descriptors = usb_copy_descriptors(hs_sdb_descs);
+		if (!f->hs_descriptors)
+			goto desc_alloc_fail;
+
+		sdb_func->hs.in = usb_find_endpoint(hs_sdb_descs,
+				f->hs_descriptors, &sdb_highspeed_in_desc);
+		sdb_func->hs.out = usb_find_endpoint(hs_sdb_descs,
+				f->hs_descriptors, &sdb_highspeed_out_desc);
+	}
+
+	return 0;
+
+desc_alloc_fail:
+	if (f->fs_descriptors)
+		usb_free_descriptors(f->fs_descriptors);
+
+	return -ENOMEM;
+}
+
+static void
+sdb_function_unbind(struct usb_configuration *c, struct usb_function *f)
+{
+	struct sdb_dev *dev = _sdb_dev;
+	struct f_sdb *sdb_func = func_to_sdb(f);
+	struct usb_request *req;
+
+	dev->online = 0;
+	dev->error = 1;
+
+	if (gadget_is_dualspeed(c->cdev->gadget))
+		usb_free_descriptors(f->hs_descriptors);
+	usb_free_descriptors(f->fs_descriptors);
+
+	mutex_lock(&sdb_lock);
+
+	while (!!(req = sdb_req_get(dev, &sdb_func->bulk_in_q)))
+		sdb_request_free(req, sdb_func->ep_in);
+
+	sdb_request_free(dev->rx_req, sdb_func->ep_out);
+
+	kfree(sdb_func);
+	dev->sdb_func = NULL;
+	dev->rx_req = NULL;
+
+	mutex_unlock(&sdb_lock);
+
+	wake_up(&dev->read_wq);
+	wake_up(&dev->write_wq);
+}
+
+static int sdb_function_set_alt(struct usb_function *f,
+		unsigned intf, unsigned alt)
+{
+	struct f_sdb *sdb_func = func_to_sdb(f);
+	struct usb_composite_dev *cdev = f->config->cdev;
+	struct sdb_dev *dev = _sdb_dev;
+	int ret;
+
+	if (sdb_func->inf_id != intf) {
+		printk(KERN_ERR "sdb_function_set_alt error wrong intf:%d alt:%d\n",
+						intf, alt);
+		return -EINVAL;
+	}
+
+	if (sdb_func->ep_in->driver_data)
+		usb_ep_disable(sdb_func->ep_in);
+	ret = tizen_usb_ep_enable(sdb_func->ep_in,
+			ep_choose(cdev->gadget,
+				sdb_func->hs.in, sdb_func->fs.in));
+	if (ret) {
+		printk(KERN_ERR "error, usb_ep_enable for sdb ep_in\n");
+		return ret;
+	}
+	sdb_func->ep_in->driver_data = sdb_func;
+
+	if (sdb_func->ep_out->driver_data)
+		usb_ep_disable(sdb_func->ep_out);
+	ret = tizen_usb_ep_enable(sdb_func->ep_out,
+			ep_choose(cdev->gadget,
+				sdb_func->hs.out, sdb_func->fs.out));
+	if (ret) {
+		usb_ep_disable(sdb_func->ep_in);
+		sdb_func->ep_in->driver_data = NULL;
+		printk(KERN_ERR "error, usb_ep_enable for sdb ep_out\n");
+		return ret;
+	}
+	sdb_func->ep_out->driver_data = sdb_func;
+
+	dev->tx_idle = &sdb_func->bulk_in_q;
+	dev->sdb_func = sdb_func;
+	dev->online = 1;
+
+	/* readers may be blocked waiting for us to go online */
+	wake_up(&dev->read_wq);
+	return 0;
+}
+
+static void sdb_function_disable(struct usb_function *f)
+{
+	struct sdb_dev *dev = _sdb_dev;
+	struct f_sdb *sdb_func = func_to_sdb(f);
+
+	dev->online = 0;
+	dev->error = 1;
+
+	spin_lock(&dev->lock);
+	dev->tx_idle = NULL;
+	spin_unlock(&dev->lock);
+
+	usb_ep_disable(sdb_func->ep_in);
+	sdb_func->ep_in->driver_data = NULL;
+
+	usb_ep_disable(sdb_func->ep_out);
+	sdb_func->ep_out->driver_data = NULL;
+
+	/* readers may be blocked waiting for us to go online */
+	wake_up(&dev->read_wq);
+	wake_up(&dev->write_wq);
+}
+
+static int sdb_setup(struct usb_composite_dev *cdev)
+{
+	struct sdb_dev *dev;
+	int ret;
+
+	printk(KERN_INFO "sdb_bind_config\n");
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (!dev)
+		return -ENOMEM;
+
+	if (sdb_string_defs[F_SDB_IDX].id == 0) {
+		ret = usb_string_id(cdev);
+		if (ret < 0) {
+			kfree(dev);
+			return ret;
+		}
+		sdb_string_defs[F_SDB_IDX].id = ret;
+		sdb_interface_desc.iInterface = ret;
+	}
+
+	spin_lock_init(&dev->lock);
+
+	init_waitqueue_head(&dev->read_wq);
+	init_waitqueue_head(&dev->write_wq);
+
+	atomic_set(&dev->open_excl, 0);
+	atomic_set(&dev->read_excl, 0);
+	atomic_set(&dev->write_excl, 0);
+
+
+	/* _sdb_dev must be set before calling usb_gadget_register_driver */
+	_sdb_dev = dev;
+
+	ret = misc_register(&sdb_device);
+	if (ret)
+		goto err1;
+	printk(".....make /dev/samsung_sdb  ....minor=%d.\n",sdb_device.minor);
+	return 0;
+
+err1:
+	kfree(dev);
+	_sdb_dev = NULL;
+	printk(KERN_ERR "sdb gadget driver failed to initialize\n");
+	return ret;
+}
+
+static int sdb_bind_config(struct usb_configuration *c)
+{
+	int ret;
+	struct f_sdb *sdb_func;
+
+	if (!_sdb_dev) {
+		printk(KERN_ERR "Error There is no _sdb_dev!!\n");
+		return -ENODEV;
+	}
+
+	sdb_func = kzalloc(sizeof(*sdb_func), GFP_KERNEL);
+	if (!sdb_func) {
+		printk(KERN_ERR "sdb_func memory alloc failed !!!\n");
+		return -ENOMEM;
+	}
+
+	INIT_LIST_HEAD(&sdb_func->bulk_in_q);
+
+	sdb_func->function.name = "sdb";
+	sdb_func->function.strings = sdb_strings;
+	sdb_func->function.bind = sdb_function_bind;
+	sdb_func->function.unbind = sdb_function_unbind;
+	sdb_func->function.set_alt = sdb_function_set_alt;
+	sdb_func->function.disable = sdb_function_disable;
+
+	ret = usb_add_function(c, &sdb_func->function);
+	if (ret)
+		printk(KERN_ERR "Error in usb_add_function failed for sdb\n");
+
+	return ret;
+}
+
+static void sdb_cleanup(void)
+{
+	struct sdb_dev	*dev = _sdb_dev;
+
+	misc_deregister(&sdb_device);
+
+	if (!dev)
+		return;
+	_sdb_dev = NULL;
+	kfree(dev);
+}
diff --git a/drivers/video/fbmem.c b/drivers/video/fbmem.c
index f7ca022..4541bf8 100644
--- a/drivers/video/fbmem.c
+++ b/drivers/video/fbmem.c
@@ -1192,7 +1192,9 @@ static long do_fb_ioctl(struct fb_info *info, unsigned int cmd,
 			return -ENODEV;
 		console_lock();
 		info->flags |= FBINFO_MISC_USEREVENT;
-		ret = fb_blank(info, arg);
+		/*FIXME for debug*/
+		/*ret = fb_blank(info, arg);*/
+		ret = 0;
 		info->flags &= ~FBINFO_MISC_USEREVENT;
 		console_unlock();
 		unlock_fb_info(info);
diff --git a/drivers/video/msm/mdss/mdss_fb.c b/drivers/video/msm/mdss/mdss_fb.c
index d740d8f..be6ac69 100644
--- a/drivers/video/msm/mdss/mdss_fb.c
+++ b/drivers/video/msm/mdss/mdss_fb.c
@@ -1121,6 +1121,8 @@ int mdss_fb_alloc_fb_ion_memory(struct msm_fb_data_type *mfd)
 	unsigned long buf_size;
 	int rc;
 	void *vaddr;
+	ion_phys_addr_t phys_addr;
+	size_t phys_len;
 
 	if (!mfd) {
 		pr_err("Invalid input param - no mfd");
@@ -1139,7 +1141,7 @@ int mdss_fb_alloc_fb_ion_memory(struct msm_fb_data_type *mfd)
 	pr_debug("size for mmap = %d", (int) size);
 
 	mfd->fb_ion_handle = ion_alloc(mfd->fb_ion_client, size, SZ_4K,
-			ION_HEAP(ION_SYSTEM_HEAP_ID), 0);
+			ION_HEAP(ION_SYSTEM_CONTIG_HEAP_ID), 0);
 	if (IS_ERR_OR_NULL(mfd->fb_ion_handle)) {
 		pr_err("unable to alloc fbmem from ion - %ld\n",
 				PTR_ERR(mfd->fb_ion_handle));
@@ -1171,11 +1173,20 @@ int mdss_fb_alloc_fb_ion_memory(struct msm_fb_data_type *mfd)
 		goto fb_mmap_failed;
 	}
 
+	rc = ion_phys(mfd->fb_ion_client, mfd->fb_ion_handle, &phys_addr, &phys_len);
+	if (rc) {
+		pr_err("%s: Unable to get phys address from ION buffer: %d\n"
+		, __func__ , rc);
+		goto fb_mmap_failed;
+	}
+
+
 	pr_debug("alloc 0x%xB vaddr = %p (%pa iova) for fb%d\n", size, vaddr,
 			&mfd->iova, mfd->index);
 
 	mfd->fbi->screen_base = (char *) vaddr;
 	mfd->fbi->fix.smem_len = size;
+	mfd->fbi->fix.smem_start = (unsigned long)phys_addr;
 
 	return rc;
 
@@ -1216,11 +1227,12 @@ static int mdss_fb_fbmem_ion_mmap(struct fb_info *info,
 
 	req_size = vma->vm_end - vma->vm_start;
 	fb_size = mfd->fbi->fix.line_length * mfd->fbi->var.yres * MDSS_FB_NUM;
-	if (req_size > fb_size) {
-		pr_warn("requested map is greater than framebuffer");
-		return -EOVERFLOW;
-	}
 
+/*	if (req_size > fb_size) {
+ *		pr_warn("requested map is greater than framebuffer");
+ *		return -EOVERFLOW;
+ *	}
+ */
 	if (!mfd->fbi->screen_base) {
 		rc = mdss_fb_alloc_fb_ion_memory(mfd);
 		if (rc < 0) {
@@ -1492,8 +1504,11 @@ static int mdss_fb_register(struct msm_fb_data_type *mfd)
 
 	mdss_fb_parse_dt(mfd);
 
-	if (mdss_fb_alloc_fbmem(mfd))
-		pr_warn("unable to allocate fb memory in fb register\n");
+	if (mdss_fb_alloc_fbmem(mfd)) {
+		if (mdss_fb_alloc_fb_ion_memory(mfd))
+			pr_warn("unable to allocate fb memory in fb register\n"
+			       );
+	}
 
 	mfd->op_enable = true;
 
@@ -1704,16 +1719,16 @@ static int mdss_fb_release_all(struct fb_info *info, bool release_all)
 			kthread_stop(mfd->disp_thread);
 			mfd->disp_thread = NULL;
 		}
-
-		if (mfd->mdp.release_fnc) {
-			ret = mfd->mdp.release_fnc(mfd, true);
-			if (ret)
-				pr_err("error fb%d release process %s pid=%d\n",
-					mfd->index, task->comm, pid);
-		}
-
-		mdss_fb_free_fb_ion_memory(mfd);
-
+/*
+ *		if (mfd->mdp.release_fnc) {
+ *			ret = mfd->mdp.release_fnc(mfd, true);
+ *			if (ret)
+ *				pr_err("error fb%d release process %s pid=%d\n",
+ *					mfd->index, task->comm, pid);
+ *		}
+ *
+ *		mdss_fb_free_fb_ion_memory(mfd);
+ */
 		ret = mdss_fb_blank_sub(FB_BLANK_POWERDOWN, info,
 			mfd->op_enable);
 		if (ret) {
diff --git a/include/linux/usb/composite.h b/include/linux/usb/composite.h
index 210da33..2b09c8c 100644
--- a/include/linux/usb/composite.h
+++ b/include/linux/usb/composite.h
@@ -172,6 +172,20 @@ int usb_function_activate(struct usb_function *);
 
 int usb_interface_id(struct usb_configuration *, struct usb_function *);
 
+/**
+ * ep_choose - select descriptor endpoint at current device speed
+ * @g: gadget, connected and running at some speed
+ * @hs: descriptor to use for high speed operation
+ * @fs: descriptor to use for full or low speed operation
+ */
+static inline struct usb_endpoint_descriptor *
+ep_choose(struct usb_gadget *g, struct usb_endpoint_descriptor *hs,
+		struct usb_endpoint_descriptor *fs)
+{
+	if (gadget_is_dualspeed(g) && g->speed == USB_SPEED_HIGH)
+		return hs;
+	return fs;
+}
 int config_ep_by_speed(struct usb_gadget *g, struct usb_function *f,
 			struct usb_ep *_ep);
 
diff --git a/include/linux/usb/gadget.h b/include/linux/usb/gadget.h
index e65cad5..d8fd2bb 100644
--- a/include/linux/usb/gadget.h
+++ b/include/linux/usb/gadget.h
@@ -210,6 +210,13 @@ static inline int usb_ep_enable(struct usb_ep *ep)
 	return ep->ops->enable(ep, ep->desc);
 }
 
+static inline int tizen_usb_ep_enable(struct usb_ep *ep,
+                                const struct usb_endpoint_descriptor *desc)
+{
+        return ep->ops->enable(ep, desc);
+}
+
+
 /**
  * usb_ep_disable - endpoint is no longer usable
  * @ep:the endpoint being unconfigured.  may not be the endpoint named "ep0".
@@ -963,6 +970,12 @@ int usb_gadget_config_buf(const struct usb_config_descriptor *config,
 struct usb_descriptor_header **usb_copy_descriptors(
 		struct usb_descriptor_header **);
 
+/* return copy of endpoint descriptor given original descriptor set */
+struct usb_endpoint_descriptor *usb_find_endpoint(
+	struct usb_descriptor_header **src,
+	struct usb_descriptor_header **copy,
+	struct usb_endpoint_descriptor *match);
+
 /**
  * usb_free_descriptors - free descriptors returned by usb_copy_descriptors()
  * @v: vector of descriptors
